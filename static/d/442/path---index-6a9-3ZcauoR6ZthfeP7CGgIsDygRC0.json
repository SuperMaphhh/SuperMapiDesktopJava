{"data":{"codeExamples":{"edges":[{"node":{"id":"a-component-using-external-plugins","code":"class MarkdownEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = { value: 'Hello, **world**!' };\n  }\n\n  handleChange(e) {\n    this.setState({ value: e.target.value });\n  }\n\n  getRawMarkup() {\n    const md = new Remarkable();\n    return { __html: md.render(this.state.value) };\n  }\n\n  render() {\n    return (\n      <div className=\"MarkdownEditor\">\n        <h3>Input</h3>\n        <label htmlFor=\"markdown-content\">\n          Enter some markdown\n        </label>\n        <textarea\n          id=\"markdown-content\"\n          onChange={this.handleChange}\n          defaultValue={this.state.value}\n        />\n        <h3>Output</h3>\n        <div\n          className=\"content\"\n          dangerouslySetInnerHTML={this.getRawMarkup()}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <MarkdownEditor />,\n  document.getElementById('markdown-example')\n);\n","mdAbsolutePath":"E:/reactjs.org/content/home/examples/a-component-using-external-plugins.md"}},{"node":{"id":"a-simple-component","code":"class HelloMessage extends React.Component {\n  render() {\n    return (\n      <div>\n        Hello {this.props.name}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <HelloMessage name=\"Taylor\" />,\n  document.getElementById('hello-example')\n);","mdAbsolutePath":"E:/reactjs.org/content/home/examples/a-simple-component.md"}},{"node":{"id":"an-application","code":"class TodoApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { items: [], text: '' };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>TODO</h3>\n        <TodoList items={this.state.items} />\n        <form onSubmit={this.handleSubmit}>\n          <label htmlFor=\"new-todo\">\n            What needs to be done?\n          </label>\n          <input\n            id=\"new-todo\"\n            onChange={this.handleChange}\n            value={this.state.text}\n          />\n          <button>\n            Add #{this.state.items.length + 1}\n          </button>\n        </form>\n      </div>\n    );\n  }\n\n  handleChange(e) {\n    this.setState({ text: e.target.value });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    if (!this.state.text.length) {\n      return;\n    }\n    const newItem = {\n      text: this.state.text,\n      id: Date.now()\n    };\n    this.setState(state => ({\n      items: state.items.concat(newItem),\n      text: ''\n    }));\n  }\n}\n\nclass TodoList extends React.Component {\n  render() {\n    return (\n      <ul>\n        {this.props.items.map(item => (\n          <li key={item.id}>{item.text}</li>\n        ))}\n      </ul>\n    );\n  }\n}\n\nReactDOM.render(\n  <TodoApp />,\n  document.getElementById('todos-example')\n);\n","mdAbsolutePath":"E:/reactjs.org/content/home/examples/an-application.md"}},{"node":{"id":"a-stateful-component","code":"class Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { seconds: 0 };\n  }\n\n  tick() {\n    this.setState(state => ({\n      seconds: state.seconds + 1\n    }));\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.tick(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    return (\n      <div>\n        Seconds: {this.state.seconds}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Timer />,\n  document.getElementById('timer-example')\n);","mdAbsolutePath":"E:/reactjs.org/content/home/examples/a-stateful-component.md"}}]},"examples":{"edges":[{"node":{"fileAbsolutePath":"E:/reactjs.org/content/home/examples/a-simple-component.md","fields":{"slug":"/home/examples/a-simple-component.html"},"frontmatter":{"title":"A Simple Component","domid":"hello-example"},"html":"<p>React components implement a <code class=\"gatsby-code-text\">render()</code> method that takes input data and returns what to display. This example uses an XML-like syntax called JSX. Input data that is passed into the component can be accessed by <code class=\"gatsby-code-text\">render()</code> via <code class=\"gatsby-code-text\">this.props</code>.</p>\n<p><strong>JSX is optional and not required to use React.</strong> Try the <a href=\"babel://es5-syntax-example\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Babel REPL</a> to see the raw JavaScript code produced by the JSX compilation step.</p>"}},{"node":{"fileAbsolutePath":"E:/reactjs.org/content/home/examples/a-stateful-component.md","fields":{"slug":"/home/examples/a-stateful-component.html"},"frontmatter":{"title":"A Stateful Component","domid":"timer-example"},"html":"<p>In addition to taking input data (accessed via <code class=\"gatsby-code-text\">this.props</code>), a component can maintain internal state data (accessed via <code class=\"gatsby-code-text\">this.state</code>). When a component’s state data changes, the rendered markup will be updated by re-invoking <code class=\"gatsby-code-text\">render()</code>.</p>"}},{"node":{"fileAbsolutePath":"E:/reactjs.org/content/home/examples/an-application.md","fields":{"slug":"/home/examples/an-application.html"},"frontmatter":{"title":"An Application","domid":"todos-example"},"html":"<p>Using <code class=\"gatsby-code-text\">props</code> and <code class=\"gatsby-code-text\">state</code>, we can put together a small Todo application. This example uses <code class=\"gatsby-code-text\">state</code> to track the current list of items as well as the text that the user has entered. Although event handlers appear to be rendered inline, they will be collected and implemented using event delegation.</p>"}},{"node":{"fileAbsolutePath":"E:/reactjs.org/content/home/examples/a-component-using-external-plugins.md","fields":{"slug":"/home/examples/a-component-using-external-plugins.html"},"frontmatter":{"title":"A Component Using External Plugins","domid":"markdown-example"},"html":"<p>React allows you to interface with other libraries and frameworks. This example uses <strong>remarkable</strong>, an external Markdown library, to convert the <code class=\"gatsby-code-text\">&lt;textarea&gt;</code>’s value in real time.</p>"}}]},"marketing":{"edges":[{"node":{"frontmatter":{"title":"产品介绍"},"html":"<p>SuperMap iDesktop Java 是基于 SuperMap iObjects Java，通过 Java 语言开发的插件式、跨平台GIS应用软件，提供了灵活的开发框架和辅助控件，便于用户二次开发。<br>\n<a href=\"tutorial/tutorial.html\">了解更多 ></a></p>"}},{"node":{"frontmatter":{"title":"产品特性"},"html":"<p>SuperMap iDesktop Java是业界首款跨平台全功能桌面GIS软件，突破了专业桌面GIS软件只能运行于Windows环境的困境，可在Linux环境中完美运行。<br>\n<a href=\"tutorial/tutorial.html\">了解更多 ></a></p>"}},{"node":{"frontmatter":{"title":"功能介绍"},"html":"<p>SuperMap iDesktop Java 提供空间数据生产及加工、空间大数据管理分析、可视化建模、服务发布等功能，可用于数据生产、加工、处理、分析以及制图。<br>\n<a href=\"tutorial/tutorial.html\">了解更多 ></a></p>"}}]}},"pageContext":{}}