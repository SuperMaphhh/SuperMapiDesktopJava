{"data":{"markdownRemark":{"html":"<p>I’ll start by answering the obvious question:</p>\n<blockquote>\n<p>What happened to 0.6 and 0.7?</p>\n</blockquote>\n<p>It’s become increasingly obvious since our launch in May that people want to use React on the server. With the server-side rendering abilities, that’s a perfect fit. However using the same copy of React on the server and then packaging it up for the client is surprisingly a harder problem. People have been using our <code class=\"gatsby-code-text\">react-tools</code> module which includes React, but when browserifying that ends up packaging all of <code class=\"gatsby-code-text\">esprima</code> and some other dependencies that aren’t needed on the client. So we wanted to make this whole experience better.</p>\n<p>We talked with <a href=\"https://github.com/jeffbski\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jeff Barczewski</a> who was the owner of the <code class=\"gatsby-code-text\">react</code> module on npm. He was kind enough to transition ownership to us and release his package under a different name: <code class=\"gatsby-code-text\">autoflow</code>. I encourage you to <a href=\"https://github.com/jeffbski/autoflow\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">check it out</a> if you’re writing a lot of asynchronous code. In order to not break all of <code class=\"gatsby-code-text\">react</code>’s current users of 0.7.x, we decided to bump our version to 0.8 and skip the issue entirely. We’re also including a warning if you use our <code class=\"gatsby-code-text\">react</code> module like you would use the previous package.</p>\n<p>In order to make the transition to 0.8 for our current users as painless as possible, we decided to make 0.8 primarily a bug fix release on top of 0.5. No public APIs were changed (even if they were already marked as deprecated). We haven’t added any of the new features we have in master, though we did take the opportunity to pull in some improvements to internals.</p>\n<p>We hope that by releasing <code class=\"gatsby-code-text\">react</code> on npm, we will enable a new set of uses that have been otherwise difficult. All feedback is welcome!</p>\n<h2>Changelog {#changelog}</h2>\n<h3>React {#react}</h3>\n<ul>\n<li>\n<p>Added support for more attributes:</p>\n<ul>\n<li><code class=\"gatsby-code-text\">rows</code> &#x26; <code class=\"gatsby-code-text\">cols</code> for <code class=\"gatsby-code-text\">&lt;textarea&gt;</code></li>\n<li><code class=\"gatsby-code-text\">defer</code> &#x26; <code class=\"gatsby-code-text\">async</code> for <code class=\"gatsby-code-text\">&lt;script&gt;</code></li>\n<li><code class=\"gatsby-code-text\">loop</code> for <code class=\"gatsby-code-text\">&lt;audio&gt;</code> &#x26; <code class=\"gatsby-code-text\">&lt;video&gt;</code></li>\n<li><code class=\"gatsby-code-text\">autoCorrect</code> for form fields (a non-standard attribute only supported by mobile WebKit)</li>\n</ul>\n</li>\n<li>Improved error messages</li>\n<li>Fixed Selection events in IE11</li>\n<li>Added <code class=\"gatsby-code-text\">onContextMenu</code> events</li>\n</ul>\n<h3>React with Addons {#react-with-addons}</h3>\n<ul>\n<li>Fixed bugs with TransitionGroup when children were undefined</li>\n<li>Added support for <code class=\"gatsby-code-text\">onTransition</code></li>\n</ul>\n<h3>react-tools {#react-tools}</h3>\n<ul>\n<li>Upgraded <code class=\"gatsby-code-text\">jstransform</code> and <code class=\"gatsby-code-text\">esprima-fb</code></li>\n</ul>\n<h3>JSXTransformer {#jsxtransformer}</h3>\n<ul>\n<li>Added support for use in IE8</li>\n<li>Upgraded browserify, which reduced file size by ~65KB (16KB gzipped)</li>\n</ul>","excerpt":"I’ll start by answering the obvious question: What happened to 0.6 and 0.7? It’s become increasingly obvious since our launch in May that people want to use React on the server. With the server-side rendering abilities, that’s a perfect fit. However using the same copy of React on the server and then packaging it up for the client is surprisingly a harder problem. People have been using our   module which includes React, but when browserifying that ends up packaging all of   and some other…","frontmatter":{"title":"React v0.8","next":null,"prev":null,"author":[{"frontmatter":{"name":"Paul O’Shannessy","url":"https://twitter.com/zpao"}}]},"fields":{"date":"December 18, 2013","path":"content\\blog\\2013-12-19-react-v0.8.0.md","slug":"/blog/2013/12/19/react-v0.8.0.html"}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"title":"创建和管理数据"},"fields":{"slug":"/blog/2019/02/23/is-react-translated-yet.html"}}},{"node":{"frontmatter":{"title":"React v16.8: The One With Hooks"},"fields":{"slug":"/blog/2019/02/06/react-v16.8.0.html"}}},{"node":{"frontmatter":{"title":"React v16.7: No, This Is Not the One With Hooks"},"fields":{"slug":"/blog/2018/12/19/react-v-16-7.html"}}},{"node":{"frontmatter":{"title":"React 16.x Roadmap"},"fields":{"slug":"/blog/2018/11/27/react-16-roadmap.html"}}},{"node":{"frontmatter":{"title":"React Conf recap: Hooks, Suspense, and Concurrent Rendering"},"fields":{"slug":"/blog/2018/11/13/react-conf-recap.html"}}},{"node":{"frontmatter":{"title":"React v16.6.0: lazy, memo and contextType"},"fields":{"slug":"/blog/2018/10/23/react-v-16-6.html"}}},{"node":{"frontmatter":{"title":"Create React App 2.0: Babel 7, Sass, and More"},"fields":{"slug":"/blog/2018/10/01/create-react-app-v2.html"}}},{"node":{"frontmatter":{"title":"Introducing the React Profiler"},"fields":{"slug":"/blog/2018/09/10/introducing-the-react-profiler.html"}}},{"node":{"frontmatter":{"title":"React v16.4.2: Server-side vulnerability fix"},"fields":{"slug":"/blog/2018/08/01/react-v-16-4-2.html"}}},{"node":{"frontmatter":{"title":"You Probably Don't Need Derived State"},"fields":{"slug":"/blog/2018/06/07/you-probably-dont-need-derived-state.html"}}}]}},"pageContext":{"slug":"/blog/2013/12/19/react-v0.8.0.html"}}