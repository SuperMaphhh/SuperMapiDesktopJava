{"data":{"markdownRemark":{"html":"<p><code class=\"gatsby-code-text\">React</code> is the entry point to the React library. If you load React from a <code class=\"gatsby-code-text\">&lt;script&gt;</code> tag, these top-level APIs are available on the <code class=\"gatsby-code-text\">React</code> global. If you use ES6 with npm, you can write <code class=\"gatsby-code-text\">import React from &#39;react&#39;</code>. If you use ES5 with npm, you can write <code class=\"gatsby-code-text\">var React = require(&#39;react&#39;)</code>.</p>\n<h2>Overview {#overview}</h2>\n<h3>Components {#components}</h3>\n<p>React components let you split the UI into independent, reusable pieces, and think about each piece in isolation. React components can be defined by subclassing <code class=\"gatsby-code-text\">React.Component</code> or <code class=\"gatsby-code-text\">React.PureComponent</code>.</p>\n<ul>\n<li><a href=\"#reactcomponent\"><code class=\"gatsby-code-text\">React.Component</code></a></li>\n<li><a href=\"#reactpurecomponent\"><code class=\"gatsby-code-text\">React.PureComponent</code></a></li>\n</ul>\n<p>If you don’t use ES6 classes, you may use the <code class=\"gatsby-code-text\">create-react-class</code> module instead. See <a href=\"/docs/react-without-es6.html\">Using React without ES6</a> for more information.</p>\n<p>React components can also be defined as functions which can be wrapped:</p>\n<ul>\n<li><a href=\"#reactmemo\"><code class=\"gatsby-code-text\">React.memo</code></a></li>\n</ul>\n<h3>Creating React Elements {#creating-react-elements}</h3>\n<p>We recommend <a href=\"/docs/introducing-jsx.html\">using JSX</a> to describe what your UI should look like. Each JSX element is just syntactic sugar for calling <a href=\"#createelement\"><code class=\"gatsby-code-text\">React.createElement()</code></a>. You will not typically invoke the following methods directly if you are using JSX.</p>\n<ul>\n<li><a href=\"#createelement\"><code class=\"gatsby-code-text\">createElement()</code></a></li>\n<li><a href=\"#createfactory\"><code class=\"gatsby-code-text\">createFactory()</code></a></li>\n</ul>\n<p>See <a href=\"/docs/react-without-jsx.html\">Using React without JSX</a> for more information.</p>\n<h3>Transforming Elements {#transforming-elements}</h3>\n<p><code class=\"gatsby-code-text\">React</code> provides several APIs for manipulating elements:</p>\n<ul>\n<li><a href=\"#cloneelement\"><code class=\"gatsby-code-text\">cloneElement()</code></a></li>\n<li><a href=\"#isvalidelement\"><code class=\"gatsby-code-text\">isValidElement()</code></a></li>\n<li><a href=\"#reactchildren\"><code class=\"gatsby-code-text\">React.Children</code></a></li>\n</ul>\n<h3>Fragments {#fragments}</h3>\n<p><code class=\"gatsby-code-text\">React</code> also provides a component for rendering multiple elements without a wrapper.</p>\n<ul>\n<li><a href=\"#reactfragment\"><code class=\"gatsby-code-text\">React.Fragment</code></a></li>\n</ul>\n<h3>Refs {#refs}</h3>\n<ul>\n<li><a href=\"#reactcreateref\"><code class=\"gatsby-code-text\">React.createRef</code></a></li>\n<li><a href=\"#reactforwardref\"><code class=\"gatsby-code-text\">React.forwardRef</code></a></li>\n</ul>\n<h3>Suspense {#suspense}</h3>\n<p>Suspense lets components “wait” for something before rendering. Today, Suspense only supports one use case: <a href=\"/docs/code-splitting.html#reactlazy\">loading components dynamically with <code class=\"gatsby-code-text\">React.lazy</code></a>. In the future, it will support other use cases like data fetching.</p>\n<ul>\n<li><a href=\"#reactlazy\"><code class=\"gatsby-code-text\">React.lazy</code></a></li>\n<li><a href=\"#reactsuspense\"><code class=\"gatsby-code-text\">React.Suspense</code></a></li>\n</ul>\n<h3>Hooks {#hooks}</h3>\n<p><em>Hooks</em> are a new addition in React 16.8. They let you use state and other React features without writing a class. Hooks have a <a href=\"/docs/hooks-intro.html\">dedicated docs section</a> and a separate API reference:</p>\n<ul>\n<li>\n<p><a href=\"/docs/hooks-reference.html#basic-hooks\">Basic Hooks</a></p>\n<ul>\n<li><a href=\"/docs/hooks-reference.html#usestate\"><code class=\"gatsby-code-text\">useState</code></a></li>\n<li><a href=\"/docs/hooks-reference.html#useeffect\"><code class=\"gatsby-code-text\">useEffect</code></a></li>\n<li><a href=\"/docs/hooks-reference.html#usecontext\"><code class=\"gatsby-code-text\">useContext</code></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/docs/hooks-reference.html#additional-hooks\">Additional Hooks</a></p>\n<ul>\n<li><a href=\"/docs/hooks-reference.html#usereducer\"><code class=\"gatsby-code-text\">useReducer</code></a></li>\n<li><a href=\"/docs/hooks-reference.html#usecallback\"><code class=\"gatsby-code-text\">useCallback</code></a></li>\n<li><a href=\"/docs/hooks-reference.html#usememo\"><code class=\"gatsby-code-text\">useMemo</code></a></li>\n<li><a href=\"/docs/hooks-reference.html#useref\"><code class=\"gatsby-code-text\">useRef</code></a></li>\n<li><a href=\"/docs/hooks-reference.html#useimperativehandle\"><code class=\"gatsby-code-text\">useImperativeHandle</code></a></li>\n<li><a href=\"/docs/hooks-reference.html#uselayouteffect\"><code class=\"gatsby-code-text\">useLayoutEffect</code></a></li>\n<li><a href=\"/docs/hooks-reference.html#usedebugvalue\"><code class=\"gatsby-code-text\">useDebugValue</code></a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2>Reference {#reference}</h2>\n<h3><code class=\"gatsby-code-text\">React.Component</code> {#reactcomponent}</h3>\n<p><code class=\"gatsby-code-text\">React.Component</code> is the base class for React components when they are defined using <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ES6 classes</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>See the <a href=\"/docs/react-component.html\">React.Component API Reference</a> for a list of methods and properties related to the base <code class=\"gatsby-code-text\">React.Component</code> class.</p>\n<hr>\n<h3><code class=\"gatsby-code-text\">React.PureComponent</code> {#reactpurecomponent}</h3>\n<p><code class=\"gatsby-code-text\">React.PureComponent</code> is similar to <a href=\"#reactcomponent\"><code class=\"gatsby-code-text\">React.Component</code></a>. The difference between them is that <a href=\"#reactcomponent\"><code class=\"gatsby-code-text\">React.Component</code></a> doesn’t implement <a href=\"/docs/react-component.html#shouldcomponentupdate\"><code class=\"gatsby-code-text\">shouldComponentUpdate()</code></a>, but <code class=\"gatsby-code-text\">React.PureComponent</code> implements it with a shallow prop and state comparison. </p>\n<p>If your React component’s <code class=\"gatsby-code-text\">render()</code> function renders the same result given the same props and state, you can use <code class=\"gatsby-code-text\">React.PureComponent</code> for a performance boost in some cases.</p>\n<blockquote>\n<p>Note</p>\n<p><code class=\"gatsby-code-text\">React.PureComponent</code>’s <code class=\"gatsby-code-text\">shouldComponentUpdate()</code> only shallowly compares the objects. If these contain complex data structures, it may produce false-negatives for deeper differences. Only extend <code class=\"gatsby-code-text\">PureComponent</code> when you expect to have simple props and state, or use <a href=\"/docs/react-component.html#forceupdate\"><code class=\"gatsby-code-text\">forceUpdate()</code></a> when you know deep data structures have changed. Or, consider using <a href=\"https://facebook.github.io/immutable-js/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">immutable objects</a> to facilitate fast comparisons of nested data.</p>\n<p>Furthermore, <code class=\"gatsby-code-text\">React.PureComponent</code>’s <code class=\"gatsby-code-text\">shouldComponentUpdate()</code> skips prop updates for the whole component subtree. Make sure all the children components are also “pure”.</p>\n</blockquote>\n<hr>\n<h3><code class=\"gatsby-code-text\">React.memo</code> {#reactmemo}</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> MyComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* render using props */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"gatsby-code-text\">React.memo</code> is a <a href=\"/docs/higher-order-components.html\">higher order component</a>. It’s similar to <a href=\"#reactpurecomponent\"><code class=\"gatsby-code-text\">React.PureComponent</code></a> but for function components instead of classes.</p>\n<p>If your function component renders the same result given the same props, you can wrap it in a call to <code class=\"gatsby-code-text\">React.memo</code> for a performance boost in some cases by memoizing the result. This means that React will skip rendering the component, and reuse the last rendered result.</p>\n<p>By default it will only shallowly compare complex objects in the props object. If you want control over the comparison, you can also provide a custom comparison function as the second argument.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* render using props */</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">areEqual</span><span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">,</span> nextProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/*\n  return true if passing nextProps to render would return\n  the same result as passing prevProps to render,\n  otherwise return false\n  */</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span>MyComponent<span class=\"token punctuation\">,</span> areEqual<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This method only exists as a <strong><a href=\"/docs/optimizing-performance.html\">performance optimization</a>.</strong> Do not rely on it to “prevent” a render, as this can lead to bugs.</p>\n<blockquote>\n<p>Note</p>\n<p>Unlike the <a href=\"/docs/react-component.html#shouldcomponentupdate\"><code class=\"gatsby-code-text\">shouldComponentUpdate()</code></a> method on class components, the <code class=\"gatsby-code-text\">areEqual</code> function returns <code class=\"gatsby-code-text\">true</code> if the props are equal and <code class=\"gatsby-code-text\">false</code> if the props are not equal. This is the inverse from <code class=\"gatsby-code-text\">shouldComponentUpdate</code>.</p>\n</blockquote>\n<hr>\n<h3><code class=\"gatsby-code-text\">createElement()</code> {#createelement}</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n  type<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>children<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Create and return a new <a href=\"/docs/rendering-elements.html\">React element</a> of the given type. The type argument can be either a tag name string (such as <code class=\"gatsby-code-text\">&#39;div&#39;</code> or <code class=\"gatsby-code-text\">&#39;span&#39;</code>), a <a href=\"/docs/components-and-props.html\">React component</a> type (a class or a function), or a <a href=\"#reactfragment\">React fragment</a> type.</p>\n<p>Code written with <a href=\"/docs/introducing-jsx.html\">JSX</a> will be converted to use <code class=\"gatsby-code-text\">React.createElement()</code>. You will not typically invoke <code class=\"gatsby-code-text\">React.createElement()</code> directly if you are using JSX. See <a href=\"/docs/react-without-jsx.html\">React Without JSX</a> to learn more.</p>\n<hr>\n<h3><code class=\"gatsby-code-text\">cloneElement()</code> {#cloneelement}</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"gatsby-code-text\"><code class=\"gatsby-code-text\">React.cloneElement(\n  element,\n  [props],\n  [...children]\n)</code></pre></div>\n<p>Clone and return a new React element using <code class=\"gatsby-code-text\">element</code> as the starting point. The resulting element will have the original element’s props with the new props merged in shallowly. New children will replace existing children. <code class=\"gatsby-code-text\">key</code> and <code class=\"gatsby-code-text\">ref</code> from the original element will be preserved.</p>\n<p><code class=\"gatsby-code-text\">React.cloneElement()</code> is almost equivalent to:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>element.type</span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">element</span><span class=\"token punctuation\">.</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>element.type</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>However, it also preserves <code class=\"gatsby-code-text\">ref</code>s. This means that if you get a child with a <code class=\"gatsby-code-text\">ref</code> on it, you won’t accidentally steal it from your ancestor. You will get the same <code class=\"gatsby-code-text\">ref</code> attached to your new element.</p>\n<p>This API was introduced as a replacement of the deprecated <code class=\"gatsby-code-text\">React.addons.cloneWithProps()</code>.</p>\n<hr>\n<h3><code class=\"gatsby-code-text\">createFactory()</code> {#createfactory}</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">React<span class=\"token punctuation\">.</span><span class=\"token function\">createFactory</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Return a function that produces React elements of a given type. Like <a href=\"#createelement\"><code class=\"gatsby-code-text\">React.createElement()</code></a>, the type argument can be either a tag name string (such as <code class=\"gatsby-code-text\">&#39;div&#39;</code> or <code class=\"gatsby-code-text\">&#39;span&#39;</code>), a <a href=\"/docs/components-and-props.html\">React component</a> type (a class or a function), or a <a href=\"#reactfragment\">React fragment</a> type.</p>\n<p>This helper is considered legacy, and we encourage you to either use JSX or use <code class=\"gatsby-code-text\">React.createElement()</code> directly instead.</p>\n<p>You will not typically invoke <code class=\"gatsby-code-text\">React.createFactory()</code> directly if you are using JSX. See <a href=\"/docs/react-without-jsx.html\">React Without JSX</a> to learn more.</p>\n<hr>\n<h3><code class=\"gatsby-code-text\">isValidElement()</code> {#isvalidelement}</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">React<span class=\"token punctuation\">.</span><span class=\"token function\">isValidElement</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Verifies the object is a React element. Returns <code class=\"gatsby-code-text\">true</code> or <code class=\"gatsby-code-text\">false</code>.</p>\n<hr>\n<h3><code class=\"gatsby-code-text\">React.Children</code> {#reactchildren}</h3>\n<p><code class=\"gatsby-code-text\">React.Children</code> provides utilities for dealing with the <code class=\"gatsby-code-text\">this.props.children</code> opaque data structure.</p>\n<h4><code class=\"gatsby-code-text\">React.Children.map</code> {#reactchildrenmap}</h4>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">React<span class=\"token punctuation\">.</span>Children<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>thisArg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Invokes a function on every immediate child contained within <code class=\"gatsby-code-text\">children</code> with <code class=\"gatsby-code-text\">this</code> set to <code class=\"gatsby-code-text\">thisArg</code>. If <code class=\"gatsby-code-text\">children</code> is an array it will be traversed and the function will be called for each child in the array. If children is <code class=\"gatsby-code-text\">null</code> or <code class=\"gatsby-code-text\">undefined</code>, this method will return <code class=\"gatsby-code-text\">null</code> or <code class=\"gatsby-code-text\">undefined</code> rather than an array.</p>\n<blockquote>\n<p>Note</p>\n<p>If <code class=\"gatsby-code-text\">children</code> is a <code class=\"gatsby-code-text\">Fragment</code> it will be treated as a single child and not traversed.</p>\n</blockquote>\n<h4><code class=\"gatsby-code-text\">React.Children.forEach</code> {#reactchildrenforeach}</h4>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">React<span class=\"token punctuation\">.</span>Children<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>thisArg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Like <a href=\"#reactchildrenmap\"><code class=\"gatsby-code-text\">React.Children.map()</code></a> but does not return an array.</p>\n<h4><code class=\"gatsby-code-text\">React.Children.count</code> {#reactchildrencount}</h4>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">React<span class=\"token punctuation\">.</span>Children<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Returns the total number of components in <code class=\"gatsby-code-text\">children</code>, equal to the number of times that a callback passed to <code class=\"gatsby-code-text\">map</code> or <code class=\"gatsby-code-text\">forEach</code> would be invoked.</p>\n<h4><code class=\"gatsby-code-text\">React.Children.only</code> {#reactchildrenonly}</h4>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">React<span class=\"token punctuation\">.</span>Children<span class=\"token punctuation\">.</span><span class=\"token function\">only</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Verifies that <code class=\"gatsby-code-text\">children</code> has only one child (a React element) and returns it. Otherwise this method throws an error.</p>\n<blockquote>\n<p>Note:</p>\n<p><code class=\"gatsby-code-text\">React.Children.only()</code> does not accept the return value of <a href=\"#reactchildrenmap\"><code class=\"gatsby-code-text\">React.Children.map()</code></a> because it is an array rather than a React element.</p>\n</blockquote>\n<h4><code class=\"gatsby-code-text\">React.Children.toArray</code> {#reactchildrentoarray}</h4>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">React<span class=\"token punctuation\">.</span>Children<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Returns the <code class=\"gatsby-code-text\">children</code> opaque data structure as a flat array with keys assigned to each child. Useful if you want to manipulate collections of children in your render methods, especially if you want to reorder or slice <code class=\"gatsby-code-text\">this.props.children</code> before passing it down.</p>\n<blockquote>\n<p>Note:</p>\n<p><code class=\"gatsby-code-text\">React.Children.toArray()</code> changes keys to preserve the semantics of nested arrays when flattening lists of children. That is, <code class=\"gatsby-code-text\">toArray</code> prefixes each key in the returned array so that each element’s key is scoped to the input array containing it.</p>\n</blockquote>\n<hr>\n<h3><code class=\"gatsby-code-text\">React.Fragment</code> {#reactfragment}</h3>\n<p>The <code class=\"gatsby-code-text\">React.Fragment</code> component lets you return multiple elements in a <code class=\"gatsby-code-text\">render()</code> method without creating an additional DOM element:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>React.Fragment</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      Some text.\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">A heading</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>React.Fragment</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can also use it with the shorthand <code class=\"gatsby-code-text\">&lt;&gt;&lt;/&gt;</code> syntax. For more information, see <a href=\"/blog/2017/11/28/react-v16.2.0-fragment-support.html\">React v16.2.0: Improved Support for Fragments</a>.</p>\n<h3><code class=\"gatsby-code-text\">React.createRef</code> {#reactcreateref}</h3>\n<p><code class=\"gatsby-code-text\">React.createRef</code> creates a <a href=\"/docs/refs-and-the-dom.html\">ref</a> that can be attached to React elements via the ref attribute.\n<code class=\"gatsby-code-text\">embed:16-3-release-blog-post/create-ref-example.js</code></p>\n<h3><code class=\"gatsby-code-text\">React.forwardRef</code> {#reactforwardref}</h3>\n<p><code class=\"gatsby-code-text\">React.forwardRef</code> creates a React component that forwards the <a href=\"/docs/refs-and-the-dom.html\">ref</a> attribute it receives to another component below in the tree. This technique is not very common but is particularly useful in two scenarios:</p>\n<ul>\n<li><a href=\"/docs/forwarding-refs.html#forwarding-refs-to-dom-components\">Forwarding refs to DOM components</a></li>\n<li><a href=\"/docs/forwarding-refs.html#forwarding-refs-in-higher-order-components\">Forwarding refs in higher-order-components</a></li>\n</ul>\n<p><code class=\"gatsby-code-text\">React.forwardRef</code> accepts a rendering function as an argument. React will call this function with <code class=\"gatsby-code-text\">props</code> and <code class=\"gatsby-code-text\">ref</code> as two arguments. This function should return a React node.</p>\n<p><code class=\"gatsby-code-text\">embed:reference-react-forward-ref.js</code></p>\n<p>In the above example, React passes a <code class=\"gatsby-code-text\">ref</code> given to <code class=\"gatsby-code-text\">&lt;FancyButton ref={ref}&gt;</code> element as a second argument to the rendering function inside the <code class=\"gatsby-code-text\">React.forwardRef</code> call. This rendering function passes the <code class=\"gatsby-code-text\">ref</code> to the <code class=\"gatsby-code-text\">&lt;button ref={ref}&gt;</code> element.</p>\n<p>As a result, after React attaches the ref, <code class=\"gatsby-code-text\">ref.current</code> will point directly to the <code class=\"gatsby-code-text\">&lt;button&gt;</code> DOM element instance.</p>\n<p>For more information, see <a href=\"/docs/forwarding-refs.html\">forwarding refs</a>.</p>\n<h3><code class=\"gatsby-code-text\">React.lazy</code> {#reactlazy}</h3>\n<p><code class=\"gatsby-code-text\">React.lazy()</code> lets you define a component that is loaded dynamically. This helps reduce the bundle size to delay loading components that aren’t used during the initial render.</p>\n<p>You can learn how to use it from our <a href=\"/docs/code-splitting.html#reactlazy\">code splitting documentation</a>. You might also want to check out <a href=\"https://medium.com/@pomber/lazy-loading-and-preloading-components-in-react-16-6-804de091c82d\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this article</a> explaining how to use it in more detail.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token comment\">// This component is loaded dynamically</span>\n<span class=\"token keyword\">const</span> SomeComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./SomeComponent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Note that rendering <code class=\"gatsby-code-text\">lazy</code> components requires that there’s a <code class=\"gatsby-code-text\">&lt;React.Suspense&gt;</code> component higher in the rendering tree. This is how you specify a loading indicator.</p>\n<blockquote>\n<p><strong>Note</strong></p>\n<p>Using <code class=\"gatsby-code-text\">React.lazy</code>with dynamic import requires Promises to be available in the JS environment. This requires a polyfill on IE11 and below.</p>\n</blockquote>\n<h3><code class=\"gatsby-code-text\">React.Suspense</code> {#reactsuspense}</h3>\n<p><code class=\"gatsby-code-text\">React.Suspense</code> let you specify the loading indicator in case some components in the tree below it are not yet ready to render. Today, lazy loading components is the <strong>only</strong> use case supported by <code class=\"gatsby-code-text\">&lt;React.Suspense&gt;</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token comment\">// This component is loaded dynamically</span>\n<span class=\"token keyword\">const</span> OtherComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./OtherComponent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// Displays &lt;Spinner> until OtherComponent loads</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>React.Suspense</span> <span class=\"token attr-name\">fallback</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Spinner</span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>OtherComponent</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>React.Suspense</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It is documented in our <a href=\"/docs/code-splitting.html#reactlazy\">code splitting guide</a>. Note that <code class=\"gatsby-code-text\">lazy</code> components can be deep inside the <code class=\"gatsby-code-text\">Suspense</code> tree — it doesn’t have to wrap every one of them. The best practice is to place <code class=\"gatsby-code-text\">&lt;Suspense&gt;</code> where you want to see a loading indicator, but to use <code class=\"gatsby-code-text\">lazy()</code> wherever you want to do code splitting.</p>\n<p>While this is not supported today, in the future we plan to let <code class=\"gatsby-code-text\">Suspense</code> handle more scenarios such as data fetching. You can read about this in <a href=\"/blog/2018/11/27/react-16-roadmap.html\">our roadmap</a>.</p>\n<blockquote>\n<p>Note:</p>\n<p><code class=\"gatsby-code-text\">React.lazy()</code> and <code class=\"gatsby-code-text\">&lt;React.Suspense&gt;</code> are not yet supported by <code class=\"gatsby-code-text\">ReactDOMServer</code>. This is a known limitation that will be resolved in the future.</p>\n</blockquote>","frontmatter":{"title":"React Top-Level API","next":null,"prev":null},"fields":{"path":"content\\docs\\reference-react.md","slug":"docs/react-api.html"}}},"pageContext":{"slug":"docs/react-api.html"}}