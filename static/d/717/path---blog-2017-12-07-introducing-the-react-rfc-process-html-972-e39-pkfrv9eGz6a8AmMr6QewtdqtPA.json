{"data":{"markdownRemark":{"html":"<p>We’re adopting an RFC (“request for comments”) process for contributing ideas to React. </p>\n<p>Inspired by <a href=\"https://github.com/yarnpkg/rfcs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Yarn</a>, <a href=\"https://github.com/emberjs/rfcs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ember</a>, and <a href=\"https://github.com/rust-lang/rfcs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Rust</a>, the goal is to allow React core team members and community members to collaborate on the design of new features. It’s also intended to provide a clear path for ideas to enter the project:</p>\n<ul>\n<li>Create an RFC document detailing your proposal.</li>\n<li>Submit a PR to the <a href=\"https://github.com/reactjs/rfcs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">RFC repository</a>.</li>\n<li>Incorporate feedback into the proposal.</li>\n<li>After discussion, the core team may or may not accept the RFC.</li>\n<li>If the RFC is accepted, the PR is merged.</li>\n</ul>\n<p>RFCs are accepted when they are approved for implementation in React. A more thorough description of the process is available in the repository’s <a href=\"https://github.com/reactjs/rfcs/blob/master/README.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">README</a>. The exact details may be refined in the future.</p>\n<h2>Who Can Submit RFCs? {#who-can-submit-rfcs}</h2>\n<p>Anyone! No knowledge of React’s internals is required, nor are you expected to implement the proposal yourself.</p>\n<p>As with our other repositories, we do ask that you complete a <a href=\"https://github.com/reactjs/rfcs#contributor-license-agreement-cla\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Contributor License Agreement</a> before we can accept your PR.</p>\n<h2>What Types of Changes Should Be Submitted As RFCs? {#what-types-of-changes-should-be-submitted-as-rfcs}</h2>\n<p>Generally, any idea that would benefit from additional review or design before being implemented is a good candidate for an RFC. As a rule of thumb, this means any proposal that adds, changes, or removes a React API.</p>\n<p>Not every change must go through the RFC process. Bug fixes or performance improvements that don’t touch the API can be submitted directly to the main library.</p>\n<p>We now have several repositories where you can submit contributions to React:</p>\n<ul>\n<li><strong>Issues, bugfixes, and code changes to the main library</strong>: <a href=\"https://github.com/facebook/react\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">facebook/react</a></li>\n<li><strong>Website and documentation</strong>: <a href=\"https://github.com/reactjs/reactjs.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">reactjs/reactjs.org</a></li>\n<li><strong>Ideas for changes that need additional review before being implemented</strong>: <a href=\"https://github.com/reactjs/rfcs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">reactjs/rfcs</a></li>\n</ul>\n<h2>RFC for A New Context API {#rfc-for-a-new-context-api}</h2>\n<p>Coinciding with the launch of our RFC process, we’ve submitted a <a href=\"https://github.com/reactjs/rfcs/pull/2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">proposal for a new version of context</a>. The proposal has already received many valuable comments from the community that we will incorporate into the design of the new API.</p>\n<p>The context PR is a good example of how a typical RFC should be structured. We’re excited to start receiving your proposals!</p>","excerpt":"We’re adopting an RFC (“request for comments”) process for contributing ideas to React.  Inspired by  Yarn ,  Ember , and  Rust , the goal is to allow React core team members and community members to collaborate on the design of new features. It’s also intended to provide a clear path for ideas to enter the project: Create an RFC document detailing your proposal. Submit a PR to the  RFC repository . Incorporate feedback into the proposal. After discussion, the core team may or may not accept the…","frontmatter":{"title":"Introducing the React RFC Process","next":null,"prev":null,"author":[{"frontmatter":{"name":"Andrew Clark","url":"https://twitter.com/acdlite"}}]},"fields":{"date":"December 06, 2017","path":"content\\blog\\2017-12-07-introducing-the-react-rfc-process.md","slug":"/blog/2017/12/07/introducing-the-react-rfc-process.html"}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"title":"创建和管理数据"},"fields":{"slug":"/blog/2019/02/23/is-react-translated-yet.html"}}},{"node":{"frontmatter":{"title":"React v16.8: The One With Hooks"},"fields":{"slug":"/blog/2019/02/06/react-v16.8.0.html"}}},{"node":{"frontmatter":{"title":"React v16.7: No, This Is Not the One With Hooks"},"fields":{"slug":"/blog/2018/12/19/react-v-16-7.html"}}},{"node":{"frontmatter":{"title":"React 16.x Roadmap"},"fields":{"slug":"/blog/2018/11/27/react-16-roadmap.html"}}},{"node":{"frontmatter":{"title":"React Conf recap: Hooks, Suspense, and Concurrent Rendering"},"fields":{"slug":"/blog/2018/11/13/react-conf-recap.html"}}},{"node":{"frontmatter":{"title":"React v16.6.0: lazy, memo and contextType"},"fields":{"slug":"/blog/2018/10/23/react-v-16-6.html"}}},{"node":{"frontmatter":{"title":"Create React App 2.0: Babel 7, Sass, and More"},"fields":{"slug":"/blog/2018/10/01/create-react-app-v2.html"}}},{"node":{"frontmatter":{"title":"Introducing the React Profiler"},"fields":{"slug":"/blog/2018/09/10/introducing-the-react-profiler.html"}}},{"node":{"frontmatter":{"title":"React v16.4.2: Server-side vulnerability fix"},"fields":{"slug":"/blog/2018/08/01/react-v-16-4-2.html"}}},{"node":{"frontmatter":{"title":"You Probably Don't Need Derived State"},"fields":{"slug":"/blog/2018/06/07/you-probably-dont-need-derived-state.html"}}}]}},"pageContext":{"slug":"/blog/2017/12/07/introducing-the-react-rfc-process.html"}}