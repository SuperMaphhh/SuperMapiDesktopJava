{"data":{"markdownRemark":{"html":"<p>For over a year, the React team has been working to implement asynchronous rendering. Last month during his talk at JSConf Iceland, <a href=\"/blog/2018/03/01/sneak-peek-beyond-react-16.html\">Dan unveiled some of the exciting new possibilities async rendering unlocks</a>. Now we’d like to share with you some of the lessons we’ve learned while working on these features, and some recipes to help prepare your components for async rendering when it launches.</p>\n<p>One of the biggest lessons we’ve learned is that some of our legacy component lifecycles tend to encourage unsafe coding practices. They are:</p>\n<ul>\n<li><code class=\"gatsby-code-text\">componentWillMount</code></li>\n<li><code class=\"gatsby-code-text\">componentWillReceiveProps</code></li>\n<li><code class=\"gatsby-code-text\">componentWillUpdate</code></li>\n</ul>\n<p>These lifecycle methods have often been misunderstood and subtly misused; furthermore, we anticipate that their potential misuse may be more problematic with async rendering. Because of this, we will be adding an “UNSAFE_” prefix to these lifecycles in an upcoming release. (Here, “unsafe” refers not to security but instead conveys that code using these lifecycles will be more likely to have bugs in future versions of React, especially once async rendering is enabled.)</p>\n<h2>Gradual Migration Path {#gradual-migration-path}</h2>\n<p><a href=\"/blog/2016/02/19/new-versioning-scheme.html\">React follows semantic versioning</a>, so this change will be gradual. Our current plan is:</p>\n<ul>\n<li><strong>16.3</strong>: Introduce aliases for the unsafe lifecycles, <code class=\"gatsby-code-text\">UNSAFE_componentWillMount</code>, <code class=\"gatsby-code-text\">UNSAFE_componentWillReceiveProps</code>, and <code class=\"gatsby-code-text\">UNSAFE_componentWillUpdate</code>. (Both the old lifecycle names and the new aliases will work in this release.)</li>\n<li><strong>A future 16.x release</strong>: Enable deprecation warning for <code class=\"gatsby-code-text\">componentWillMount</code>, <code class=\"gatsby-code-text\">componentWillReceiveProps</code>, and <code class=\"gatsby-code-text\">componentWillUpdate</code>. (Both the old lifecycle names and the new aliases will work in this release, but the old names will log a DEV-mode warning.)</li>\n<li><strong>17.0</strong>: Remove <code class=\"gatsby-code-text\">componentWillMount</code>, <code class=\"gatsby-code-text\">componentWillReceiveProps</code>, and <code class=\"gatsby-code-text\">componentWillUpdate</code> . (Only the new “UNSAFE_” lifecycle names will work from this point forward.)</li>\n</ul>\n<p><strong>Note that if you’re a React application developer, you don’t have to do anything about the legacy methods yet. The primary purpose of the upcoming version 16.3 release is to enable open source project maintainers to update their libraries in advance of any deprecation warnings. Those warnings will not be enabled until a future 16.x release.</strong></p>\n<p>We maintain over 50,000 React components at Facebook, and we don’t plan to rewrite them all immediately. We understand that migrations take time. We will take the gradual migration path along with everyone in the React community.</p>\n<hr>\n<h2>Migrating from Legacy Lifecycles {#migrating-from-legacy-lifecycles}</h2>\n<p>If you’d like to start using the new component APIs introduced in React 16.3 (or if you’re a maintainer looking to update your library in advance) here are a few examples that we hope will help you to start thinking about components a bit differently. Over time, we plan to add additional “recipes” to our documentation that show how to perform common tasks in a way that avoids the problematic lifecycles.</p>\n<p>Before we begin, here’s a quick overview of the lifecycle changes planned for version 16.3:</p>\n<ul>\n<li>We are <strong>adding the following lifecycle aliases</strong>: <code class=\"gatsby-code-text\">UNSAFE_componentWillMount</code>, <code class=\"gatsby-code-text\">UNSAFE_componentWillReceiveProps</code>, and <code class=\"gatsby-code-text\">UNSAFE_componentWillUpdate</code>. (Both the old lifecycle names and the new aliases will be supported.)</li>\n<li>We are <strong>introducing two new lifecycles</strong>, static <code class=\"gatsby-code-text\">getDerivedStateFromProps</code> and <code class=\"gatsby-code-text\">getSnapshotBeforeUpdate</code>.</li>\n</ul>\n<h3>New lifecycle: <code class=\"gatsby-code-text\">getDerivedStateFromProps</code> {#new-lifecycle-getderivedstatefromprops}</h3>\n<p><code class=\"gatsby-code-text\">embed:update-on-async-rendering/definition-getderivedstatefromprops.js</code></p>\n<p>The new static <code class=\"gatsby-code-text\">getDerivedStateFromProps</code> lifecycle is invoked after a component is instantiated as well as before it is re-rendered. It can return an object to update <code class=\"gatsby-code-text\">state</code>, or <code class=\"gatsby-code-text\">null</code> to indicate that the new <code class=\"gatsby-code-text\">props</code> do not require any <code class=\"gatsby-code-text\">state</code> updates.</p>\n<p>Together with <code class=\"gatsby-code-text\">componentDidUpdate</code>, this new lifecycle should cover all use cases for the legacy <code class=\"gatsby-code-text\">componentWillReceiveProps</code>.</p>\n<blockquote>\n<p>Note:</p>\n<p>Both the older <code class=\"gatsby-code-text\">componentWillReceiveProps</code> and the new <code class=\"gatsby-code-text\">getDerivedStateFromProps</code> methods add significant complexity to components. This often leads to <a href=\"/blog/2018/06/07/you-probably-dont-need-derived-state.html#common-bugs-when-using-derived-state\">bugs</a>. Consider <strong><a href=\"/blog/2018/06/07/you-probably-dont-need-derived-state.html\">simpler alternatives to derived state</a></strong> to make components predictable and maintainable.</p>\n</blockquote>\n<h3>New lifecycle: <code class=\"gatsby-code-text\">getSnapshotBeforeUpdate</code> {#new-lifecycle-getsnapshotbeforeupdate}</h3>\n<p><code class=\"gatsby-code-text\">embed:update-on-async-rendering/definition-getsnapshotbeforeupdate.js</code></p>\n<p>The new <code class=\"gatsby-code-text\">getSnapshotBeforeUpdate</code> lifecycle is called right before mutations are made (e.g. before the DOM is updated). The return value for this lifecycle will be passed as the third parameter to <code class=\"gatsby-code-text\">componentDidUpdate</code>. (This lifecycle isn’t often needed, but can be useful in cases like manually preserving scroll position during rerenders.)</p>\n<p>Together with <code class=\"gatsby-code-text\">componentDidUpdate</code>, this new lifecycle should cover all use cases for the legacy <code class=\"gatsby-code-text\">componentWillUpdate</code>.</p>\n<p>You can find their type signatures <a href=\"https://gist.github.com/gaearon/88634d27abbc4feeb40a698f760f3264\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">in this gist</a>.</p>\n<p>We’ll look at examples of how both of these lifecycles can be used below.</p>\n<h2>Examples {#examples}</h2>\n<ul>\n<li><a href=\"#initializing-state\">Initializing state</a></li>\n<li><a href=\"#fetching-external-data\">Fetching external data</a></li>\n<li><a href=\"#adding-event-listeners-or-subscriptions\">Adding event listeners (or subscriptions)</a></li>\n<li><a href=\"#updating-state-based-on-props\">Updating <code class=\"gatsby-code-text\">state</code> based on props</a></li>\n<li><a href=\"#invoking-external-callbacks\">Invoking external callbacks</a></li>\n<li><a href=\"#side-effects-on-props-change\">Side effects on props change</a></li>\n<li><a href=\"#fetching-external-data-when-props-change\">Fetching external data when props change</a></li>\n<li><a href=\"#reading-dom-properties-before-an-update\">Reading DOM properties before an update</a></li>\n</ul>\n<blockquote>\n<p>Note</p>\n<p>For brevity, the examples below are written using the experimental class properties transform, but the same migration strategies apply without it.</p>\n</blockquote>\n<h3>Initializing state {#initializing-state}</h3>\n<p>This example shows a component with <code class=\"gatsby-code-text\">setState</code> calls inside of <code class=\"gatsby-code-text\">componentWillMount</code>:\n<code class=\"gatsby-code-text\">embed:update-on-async-rendering/initializing-state-before.js</code></p>\n<p>The simplest refactor for this type of component is to move state initialization to the constructor or to a property initializer, like so:\n<code class=\"gatsby-code-text\">embed:update-on-async-rendering/initializing-state-after.js</code></p>\n<h3>Fetching external data {#fetching-external-data}</h3>\n<p>Here is an example of a component that uses <code class=\"gatsby-code-text\">componentWillMount</code> to fetch external data:\n<code class=\"gatsby-code-text\">embed:update-on-async-rendering/fetching-external-data-before.js</code></p>\n<p>The above code is problematic for both server rendering (where the external data won’t be used) and the upcoming async rendering mode (where the request might be initiated multiple times).</p>\n<p>The recommended upgrade path for most use cases is to move data-fetching into <code class=\"gatsby-code-text\">componentDidMount</code>:\n<code class=\"gatsby-code-text\">embed:update-on-async-rendering/fetching-external-data-after.js</code></p>\n<p>There is a common misconception that fetching in <code class=\"gatsby-code-text\">componentWillMount</code> lets you avoid the first empty rendering state. In practice this was never true because React has always executed <code class=\"gatsby-code-text\">render</code> immediately after <code class=\"gatsby-code-text\">componentWillMount</code>. If the data is not available by the time <code class=\"gatsby-code-text\">componentWillMount</code> fires, the first <code class=\"gatsby-code-text\">render</code> will still show a loading state regardless of where you initiate the fetch. This is why moving the fetch to <code class=\"gatsby-code-text\">componentDidMount</code> has no perceptible effect in the vast majority of cases.</p>\n<blockquote>\n<p>Note</p>\n<p>Some advanced use-cases (e.g. libraries like Relay) may want to experiment with eagerly prefetching async data. An example of how this can be done is available <a href=\"https://gist.github.com/bvaughn/89700e525ff423a75ffb63b1b1e30a8f\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.</p>\n<p>In the longer term, the canonical way to fetch data in React components will likely be based on the “suspense” API <a href=\"/blog/2018/03/01/sneak-peek-beyond-react-16.html\">introduced at JSConf Iceland</a>. Both simple data fetching solutions and libraries like Apollo and Relay will be able to use it under the hood. It is significantly less verbose than either of the above solutions, but will not be finalized in time for the 16.3 release.</p>\n<p>When supporting server rendering, it’s currently necessary to provide the data synchronously – <code class=\"gatsby-code-text\">componentWillMount</code> was often used for this purpose but the constructor can be used as a replacement. The upcoming suspense APIs will make async data fetching cleanly possible for both client and server rendering.</p>\n</blockquote>\n<h3>Adding event listeners (or subscriptions) {#adding-event-listeners-or-subscriptions}</h3>\n<p>Here is an example of a component that subscribes to an external event dispatcher when mounting:\n<code class=\"gatsby-code-text\">embed:update-on-async-rendering/adding-event-listeners-before.js</code></p>\n<p>Unfortunately, this can cause memory leaks for server rendering (where <code class=\"gatsby-code-text\">componentWillUnmount</code> will never be called) and async rendering (where rendering might be interrupted before it completes, causing <code class=\"gatsby-code-text\">componentWillUnmount</code> not to be called).</p>\n<p>People often assume that <code class=\"gatsby-code-text\">componentWillMount</code> and <code class=\"gatsby-code-text\">componentWillUnmount</code> are always paired, but that is not guaranteed. Only once <code class=\"gatsby-code-text\">componentDidMount</code> has been called does React guarantee that <code class=\"gatsby-code-text\">componentWillUnmount</code> will later be called for clean up.</p>\n<p>For this reason, the recommended way to add listeners/subscriptions is to use the <code class=\"gatsby-code-text\">componentDidMount</code> lifecycle:\n<code class=\"gatsby-code-text\">embed:update-on-async-rendering/adding-event-listeners-after.js</code></p>\n<p>Sometimes it is important to update subscriptions in response to property changes. If you’re using a library like Redux or MobX, the library’s container component should handle this for you. For application authors, we’ve created a small library, <a href=\"https://github.com/facebook/react/tree/master/packages/create-subscription\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"gatsby-code-text\">create-subscription</code></a>, to help with this. We’ll publish it along with React 16.3.</p>\n<p>Rather than passing a subscribable <code class=\"gatsby-code-text\">dataSource</code> prop as we did in the example above, we could use <code class=\"gatsby-code-text\">create-subscription</code> to pass in the subscribed value:</p>\n<p><code class=\"gatsby-code-text\">embed:update-on-async-rendering/adding-event-listeners-create-subscription.js</code></p>\n<blockquote>\n<p>Note</p>\n<p>Libraries like Relay/Apollo should manage subscriptions manually with the same techniques as <code class=\"gatsby-code-text\">create-subscription</code> uses under the hood (as referenced <a href=\"https://gist.github.com/bvaughn/d569177d70b50b58bff69c3c4a5353f3\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>) in a way that is most optimized for their library usage.</p>\n</blockquote>\n<h3>Updating <code class=\"gatsby-code-text\">state</code> based on <code class=\"gatsby-code-text\">props</code> {#updating-state-based-on-props}</h3>\n<blockquote>\n<p>Note:</p>\n<p>Both the older <code class=\"gatsby-code-text\">componentWillReceiveProps</code> and the new <code class=\"gatsby-code-text\">getDerivedStateFromProps</code> methods add significant complexity to components. This often leads to <a href=\"/blog/2018/06/07/you-probably-dont-need-derived-state.html#common-bugs-when-using-derived-state\">bugs</a>. Consider <strong><a href=\"/blog/2018/06/07/you-probably-dont-need-derived-state.html\">simpler alternatives to derived state</a></strong> to make components predictable and maintainable.</p>\n</blockquote>\n<p>Here is an example of a component that uses the legacy <code class=\"gatsby-code-text\">componentWillReceiveProps</code> lifecycle to update <code class=\"gatsby-code-text\">state</code> based on new <code class=\"gatsby-code-text\">props</code> values:\n<code class=\"gatsby-code-text\">embed:update-on-async-rendering/updating-state-from-props-before.js</code></p>\n<p>Although the above code is not problematic in itself, the <code class=\"gatsby-code-text\">componentWillReceiveProps</code> lifecycle is often mis-used in ways that <em>do</em> present problems. Because of this, the method will be deprecated.</p>\n<p>As of version 16.3, the recommended way to update <code class=\"gatsby-code-text\">state</code> in response to <code class=\"gatsby-code-text\">props</code> changes is with the new <code class=\"gatsby-code-text\">static getDerivedStateFromProps</code> lifecycle. (That lifecycle is called when a component is created and each time it receives new props):\n<code class=\"gatsby-code-text\">embed:update-on-async-rendering/updating-state-from-props-after.js</code></p>\n<p>You may notice in the example above that <code class=\"gatsby-code-text\">props.currentRow</code> is mirrored in state (as <code class=\"gatsby-code-text\">state.lastRow</code>). This enables <code class=\"gatsby-code-text\">getDerivedStateFromProps</code> to access the previous props value in the same way as is done in <code class=\"gatsby-code-text\">componentWillReceiveProps</code>.</p>\n<p>You may wonder why we don’t just pass previous props as a parameter to <code class=\"gatsby-code-text\">getDerivedStateFromProps</code>. We considered this option when designing the API, but ultimately decided against it for two reasons:</p>\n<ul>\n<li>A <code class=\"gatsby-code-text\">prevProps</code> parameter would be null the first time <code class=\"gatsby-code-text\">getDerivedStateFromProps</code> was called (after instantiation), requiring an if-not-null check to be added any time <code class=\"gatsby-code-text\">prevProps</code> was accessed.</li>\n<li>Not passing the previous props to this function is a step toward freeing up memory in future versions of React. (If React does not need to pass previous props to lifecycles, then it does not need to keep the previous <code class=\"gatsby-code-text\">props</code> object in memory.)</li>\n</ul>\n<blockquote>\n<p>Note</p>\n<p>If you’re writing a shared component, the <a href=\"https://github.com/reactjs/react-lifecycles-compat\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"gatsby-code-text\">react-lifecycles-compat</code></a> polyfill enables the new <code class=\"gatsby-code-text\">getDerivedStateFromProps</code> lifecycle to be used with older versions of React as well. <a href=\"#open-source-project-maintainers\">Learn more about how to use it below.</a></p>\n</blockquote>\n<h3>Invoking external callbacks {#invoking-external-callbacks}</h3>\n<p>Here is an example of a component that calls an external function when its internal state changes:\n<code class=\"gatsby-code-text\">embed:update-on-async-rendering/invoking-external-callbacks-before.js</code></p>\n<p>Sometimes people use <code class=\"gatsby-code-text\">componentWillUpdate</code> out of a misplaced fear that by the time <code class=\"gatsby-code-text\">componentDidUpdate</code> fires, it is “too late” to update the state of other components. This is not the case. React ensures that any <code class=\"gatsby-code-text\">setState</code> calls that happen during <code class=\"gatsby-code-text\">componentDidMount</code> and <code class=\"gatsby-code-text\">componentDidUpdate</code> are flushed before the user sees the updated UI. In general, it is better to avoid cascading updates like this, but in some cases they are necessary (for example, if you need to position a tooltip after measuring the rendered DOM element).</p>\n<p>Either way, it is unsafe to use <code class=\"gatsby-code-text\">componentWillUpdate</code> for this purpose in async mode, because the external callback might get called multiple times for a single update. Instead, the <code class=\"gatsby-code-text\">componentDidUpdate</code> lifecycle should be used since it is guaranteed to be invoked only once per update:\n<code class=\"gatsby-code-text\">embed:update-on-async-rendering/invoking-external-callbacks-after.js</code></p>\n<h3>Side effects on props change {#side-effects-on-props-change}</h3>\n<p>Similar to the <a href=\"#invoking-external-callbacks\">example above</a>, sometimes components have side effects when <code class=\"gatsby-code-text\">props</code> change.</p>\n<p><code class=\"gatsby-code-text\">embed:update-on-async-rendering/side-effects-when-props-change-before.js</code></p>\n<p>Like <code class=\"gatsby-code-text\">componentWillUpdate</code>, <code class=\"gatsby-code-text\">componentWillReceiveProps</code> might get called multiple times for a single update. For this reason it is important to avoid putting side effects in this method. Instead, <code class=\"gatsby-code-text\">componentDidUpdate</code> should be used since it is guaranteed to be invoked only once per update:</p>\n<p><code class=\"gatsby-code-text\">embed:update-on-async-rendering/side-effects-when-props-change-after.js</code></p>\n<h3>Fetching external data when <code class=\"gatsby-code-text\">props</code> change {#fetching-external-data-when-props-change}</h3>\n<p>Here is an example of a component that fetches external data based on <code class=\"gatsby-code-text\">props</code> values:\n<code class=\"gatsby-code-text\">embed:update-on-async-rendering/updating-external-data-when-props-change-before.js</code></p>\n<p>The recommended upgrade path for this component is to move data updates into <code class=\"gatsby-code-text\">componentDidUpdate</code>. You can also use the new <code class=\"gatsby-code-text\">getDerivedStateFromProps</code> lifecycle to clear stale data before rendering the new props:\n<code class=\"gatsby-code-text\">embed:update-on-async-rendering/updating-external-data-when-props-change-after.js</code></p>\n<blockquote>\n<p>Note</p>\n<p>If you’re using an HTTP library that supports cancellation, like <a href=\"https://www.npmjs.com/package/axios\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">axios</a>, then it’s simple to cancel an in-progress request when unmounting. For native Promises, you can use an approach like <a href=\"https://gist.github.com/bvaughn/982ab689a41097237f6e9860db7ca8d6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">the one shown here</a>.</p>\n</blockquote>\n<h3>Reading DOM properties before an update {#reading-dom-properties-before-an-update}</h3>\n<p>Here is an example of a component that reads a property from the DOM before an update in order to maintain scroll position within a list:\n<code class=\"gatsby-code-text\">embed:update-on-async-rendering/react-dom-properties-before-update-before.js</code></p>\n<p>In the above example, <code class=\"gatsby-code-text\">componentWillUpdate</code> is used to read the DOM property. However with async rendering, there may be delays between “render” phase lifecycles (like <code class=\"gatsby-code-text\">componentWillUpdate</code> and <code class=\"gatsby-code-text\">render</code>) and “commit” phase lifecycles (like <code class=\"gatsby-code-text\">componentDidUpdate</code>). If the user does something like resize the window during this time, the <code class=\"gatsby-code-text\">scrollHeight</code> value read from <code class=\"gatsby-code-text\">componentWillUpdate</code> will be stale.</p>\n<p>The solution to this problem is to use the new “commit” phase lifecycle, <code class=\"gatsby-code-text\">getSnapshotBeforeUpdate</code>. This method gets called <em>immediately before</em> mutations are made (e.g. before the DOM is updated). It can return a value for React to pass as a parameter to <code class=\"gatsby-code-text\">componentDidUpdate</code>, which gets called <em>immediately after</em> mutations.</p>\n<p>The two lifecycles can be used together like this:</p>\n<p><code class=\"gatsby-code-text\">embed:update-on-async-rendering/react-dom-properties-before-update-after.js</code></p>\n<blockquote>\n<p>Note</p>\n<p>If you’re writing a shared component, the <a href=\"https://github.com/reactjs/react-lifecycles-compat\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"gatsby-code-text\">react-lifecycles-compat</code></a> polyfill enables the new <code class=\"gatsby-code-text\">getSnapshotBeforeUpdate</code> lifecycle to be used with older versions of React as well. <a href=\"#open-source-project-maintainers\">Learn more about how to use it below.</a></p>\n</blockquote>\n<h2>Other scenarios {#other-scenarios}</h2>\n<p>While we tried to cover the most common use cases in this post, we recognize that we might have missed some of them. If you are using <code class=\"gatsby-code-text\">componentWillMount</code>, <code class=\"gatsby-code-text\">componentWillUpdate</code>, or <code class=\"gatsby-code-text\">componentWillReceiveProps</code> in ways that aren’t covered by this blog post, and aren’t sure how to migrate off these legacy lifecycles, please <a href=\"https://github.com/reactjs/reactjs.org/issues/new\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">file a new issue against our documentation</a> with your code examples and as much background information as you can provide. We will update this document with new alternative patterns as they come up.</p>\n<h2>Open source project maintainers {#open-source-project-maintainers}</h2>\n<p>Open source maintainers might be wondering what these changes mean for shared components. If you implement the above suggestions, what happens with components that depend on the new static <code class=\"gatsby-code-text\">getDerivedStateFromProps</code> lifecycle? Do you also have to release a new major version and drop compatibility for React 16.2 and older?</p>\n<p>Fortunately, you do not!</p>\n<p>When React 16.3 is published, we’ll also publish a new npm package, <a href=\"https://github.com/reactjs/react-lifecycles-compat\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"gatsby-code-text\">react-lifecycles-compat</code></a>. This package polyfills components so that the new <code class=\"gatsby-code-text\">getDerivedStateFromProps</code> and <code class=\"gatsby-code-text\">getSnapshotBeforeUpdate</code> lifecycles will also work with older versions of React (0.14.9+).</p>\n<p>To use this polyfill, first add it as a dependency to your library:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"gatsby-code-bash\"><code class=\"gatsby-code-bash\"><span class=\"token comment\"># Yarn</span>\nyarn add react-lifecycles-compat\n\n<span class=\"token comment\"># NPM</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> react-lifecycles-compat --save</code></pre></div>\n<p>Next, update your components to use the new lifecycles (as described above).</p>\n<p>Lastly, use the polyfill to make your component backwards compatible with older versions of React:\n<code class=\"gatsby-code-text\">embed:update-on-async-rendering/using-react-lifecycles-compat.js</code></p>","excerpt":"For over a year, the React team has been working to implement asynchronous rendering. Last month during his talk at JSConf Iceland,  Dan unveiled some of the exciting new possibilities async rendering unlocks . Now we’d like to share with you some of the lessons we’ve learned while working on these features, and some recipes to help prepare your components for async rendering when it launches. One of the biggest lessons we’ve learned is that some of our legacy component lifecycles tend to…","frontmatter":{"title":"Update on Async Rendering","next":null,"prev":null,"author":[{"frontmatter":{"name":"Brian Vaughn","url":"https://github.com/bvaughn"}}]},"fields":{"date":"March 26, 2018","path":"content\\blog\\2018-03-27-update-on-async-rendering.md","slug":"/blog/2018/03/27/update-on-async-rendering.html"}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"title":"创建和管理数据"},"fields":{"slug":"/blog/2019/02/23/is-react-translated-yet.html"}}},{"node":{"frontmatter":{"title":"React v16.8: The One With Hooks"},"fields":{"slug":"/blog/2019/02/06/react-v16.8.0.html"}}},{"node":{"frontmatter":{"title":"React v16.7: No, This Is Not the One With Hooks"},"fields":{"slug":"/blog/2018/12/19/react-v-16-7.html"}}},{"node":{"frontmatter":{"title":"React 16.x Roadmap"},"fields":{"slug":"/blog/2018/11/27/react-16-roadmap.html"}}},{"node":{"frontmatter":{"title":"React Conf recap: Hooks, Suspense, and Concurrent Rendering"},"fields":{"slug":"/blog/2018/11/13/react-conf-recap.html"}}},{"node":{"frontmatter":{"title":"React v16.6.0: lazy, memo and contextType"},"fields":{"slug":"/blog/2018/10/23/react-v-16-6.html"}}},{"node":{"frontmatter":{"title":"Create React App 2.0: Babel 7, Sass, and More"},"fields":{"slug":"/blog/2018/10/01/create-react-app-v2.html"}}},{"node":{"frontmatter":{"title":"Introducing the React Profiler"},"fields":{"slug":"/blog/2018/09/10/introducing-the-react-profiler.html"}}},{"node":{"frontmatter":{"title":"React v16.4.2: Server-side vulnerability fix"},"fields":{"slug":"/blog/2018/08/01/react-v-16-4-2.html"}}},{"node":{"frontmatter":{"title":"You Probably Don't Need Derived State"},"fields":{"slug":"/blog/2018/06/07/you-probably-dont-need-derived-state.html"}}}]}},"pageContext":{"slug":"/blog/2018/03/27/update-on-async-rendering.html"}}