{"data":{"markdownRemark":{"html":"<p>Elements are the smallest building blocks of React apps.</p>\n<p>An element describes what you want to see on the screen:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello, world</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Unlike browser DOM elements, React elements are plain objects, and are cheap to create. React DOM takes care of updating the DOM to match the React elements.</p>\n<blockquote>\n<p><strong>Note:</strong></p>\n<p>One might confuse elements with a more widely known concept of “components”. We will introduce components in the <a href=\"/docs/components-and-props.html\">next section</a>. Elements are what components are “made of”, and we encourage you to read this section before jumping ahead.</p>\n</blockquote>\n<h2>Rendering an Element into the DOM {#rendering-an-element-into-the-dom}</h2>\n<p>Let’s say there is a <code class=\"gatsby-code-text\">&lt;div&gt;</code> somewhere in your HTML file:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"gatsby-code-html\"><code class=\"gatsby-code-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>We call this a “root” DOM node because everything inside it will be managed by React DOM.</p>\n<p>Applications built with just React usually have a single root DOM node. If you are integrating React into an existing app, you may have as many isolated root DOM nodes as you like.</p>\n<p>To render a React element into a root DOM node, pass both to <code class=\"gatsby-code-text\">ReactDOM.render()</code>:</p>\n<p><code class=\"gatsby-code-text\">embed:rendering-elements/render-an-element.js</code></p>\n<p><a href=\"codepen://rendering-elements/render-an-element\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"></a></p>\n<p>It displays “Hello, world” on the page.</p>\n<h2>Updating the Rendered Element {#updating-the-rendered-element}</h2>\n<p>React elements are <a href=\"https://en.wikipedia.org/wiki/Immutable_object\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">immutable</a>. Once you create an element, you can’t change its children or attributes. An element is like a single frame in a movie: it represents the UI at a certain point in time.</p>\n<p>With our knowledge so far, the only way to update the UI is to create a new element, and pass it to <code class=\"gatsby-code-text\">ReactDOM.render()</code>.</p>\n<p>Consider this ticking clock example:</p>\n<p><code class=\"gatsby-code-text\">embed:rendering-elements/update-rendered-element.js</code></p>\n<p><a href=\"codepen://rendering-elements/update-rendered-element\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"></a></p>\n<p>It calls <code class=\"gatsby-code-text\">ReactDOM.render()</code> every second from a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"gatsby-code-text\">setInterval()</code></a> callback.</p>\n<blockquote>\n<p><strong>Note:</strong></p>\n<p>In practice, most React apps only call <code class=\"gatsby-code-text\">ReactDOM.render()</code> once. In the next sections we will learn how such code gets encapsulated into <a href=\"/docs/state-and-lifecycle.html\">stateful components</a>.</p>\n<p>We recommend that you don’t skip topics because they build on each other.</p>\n</blockquote>\n<h2>React Only Updates What’s Necessary {#react-only-updates-whats-necessary}</h2>\n<p>React DOM compares the element and its children to the previous one, and only applies the DOM updates necessary to bring the DOM to the desired state.</p>\n<p>You can verify by inspecting the <a href=\"codepen://rendering-elements/update-rendered-element\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">last example</a> with the browser tools:</p>\n<p><img src=\"/granular-dom-updates-c158617ed7cc0eac8f58330e49e48224.gif\" alt=\"DOM inspector showing granular updates\"></p>\n<p>Even though we create an element describing the whole UI tree on every tick, only the text node whose contents has changed gets updated by React DOM.</p>\n<p>In our experience, thinking about how the UI should look at any given moment rather than how to change it over time eliminates a whole class of bugs.</p>","frontmatter":{"title":"Rendering Elements","next":"components-and-props.html","prev":"introducing-jsx.html"},"fields":{"path":"content\\docs\\rendering-elements.md","slug":"docs/rendering-elements.html"}}},"pageContext":{"slug":"docs/rendering-elements.html"}}